from abc import ABCMeta,abstractmethod

class PointCut(object):
	def __init__(self, lh, operator,  rh):
		#TODO can be refactored
		if isinstance(lh,String):
			self.lh = PointCutOperandIdentifier(lh)
		elif isinstance(lh,PointCutOperandIdentifier):
			self.lh = lh
		else:
			raise(TypeError,"lh must be of type String or PointCutOperandIdentifier")
	

		if isinstance(rh,String):
			self.rh = PointCutOperandIdentifier(rh)
		elif isinstance(rh,PointCutOperandIdentifier):
			self.rh = rh
		else:
			raise(TypeError,"rh must be of type String or PointCutOperandIdentifier")

		if isinstance(operator,String):
			self.operator = PointCutOperandIdentifier(operator)
		elif isinstance(rh,PointCutOperandIdentifier):
			self.operator = operator
		else:
			raise(TypeError,"operator must be of type String or PointCutOperandIdentifier")

    
class PointCutOperandIdentifier(object):
	def __init__(self, String):
		
    pass
    
class PointCutOperator(object):
    pass
    
class PointCutContext(object):
    # left hand + right hand side + operator
    # recurion information, i.e. is this already in another point cut / advice?
    # defined by advice or defined by something else
    pass

class Advice(object):
    pass

class Weaver(object):
    pass
    
